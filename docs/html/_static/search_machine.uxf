<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram program="umlet" version="14.2">
  <zoom_level>10</zoom_level>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>360</x>
      <y>90</y>
      <w>30</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>lt=()-[v]</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;50.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>150</x>
      <y>130</y>
      <w>1180</w>
      <h>890</h>
    </coordinates>
    <panel_attributes>*search*
--
entry /
  scout.producer = PikaTopicPublisherMaker(
    ip_address=scout.ip_address,
    routing_key=scout.routing_key,
    exchange_name=scout.exchange_name,
    connection_attempts=RabbitConsumerScout.CONNECTION_ATTEMPTS,
    callback_tempo=RabbitConsumerScout.SCOUT_TEMPO_SEC)
  scout.subscribe(Event(signals.REFACTOR_SEARCH))

AMQP_CONSUMER_CHECK as e /
  if scout.live_trace or scout.spy_trace:
    pp(e.payload)

    
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>600</x>
      <y>260</y>
      <w>690</w>
      <h>320</h>
    </coordinates>
    <panel_attributes>*producer_thread_engaged*
--
entry /
  scout.producer.start_thread()
  scout.post_fifo(Event(
    signal=signals.try_to_contact_consumer), 
    times=1,
    period=0.2,
    deferred=True)
  
exit / 
  scout.cancel_events(
    Event(signal=signals.try_to_contact_consumer))
  scout.producer.stop_thread()
	
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>500</x>
      <y>410</y>
      <w>20</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>type=initial</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>500</x>
      <y>410</y>
      <w>120</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;100.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>670</x>
      <y>720</y>
      <w>320</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>*AMQP_CONSUMER_SERVER_FOUND*
--
entry /
  scout.publish(
	  signal=signals.AMQP_CONSUMER_CHECK,
	  payload=(chart.ip, True)
	
  
exit / 
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>240</x>
      <y>840</y>
      <w>360</w>
      <h>120</h>
    </coordinates>
    <panel_attributes>*NO_AMQP_CONSUMER_SERVER_FOUND*
--
entry /
  scout.publish(
    Event(signal=signals.AMQP_CONSUMER_CHECK),
    payload=(scout.ip_address,False)

valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>760</x>
      <y>570</y>
      <w>30</w>
      <h>80</h>
    </coordinates>
    <panel_attributes>lt=-&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;60.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>370</x>
      <y>640</y>
      <w>400</w>
      <h>220</h>
    </coordinates>
    <panel_attributes>lt=-&gt;</panel_attributes>
    <additional_attributes>380.0;10.0;10.0;10.0;10.0;200.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>780</x>
      <y>640</y>
      <w>70</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>lt=-&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;50.0;10.0;50.0;80.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>360</x>
      <y>620</y>
      <w>280</w>
      <h>70</h>
    </coordinates>
    <panel_attributes>[scout.producer.connect_error]
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>UMLGeneric</id>
    <coordinates>
      <x>220</x>
      <y>30</y>
      <w>200</w>
      <h>50</h>
    </coordinates>
    <panel_attributes>symbol=component
Event Processor</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>310</x>
      <y>70</y>
      <w>70</w>
      <h>60</h>
    </coordinates>
    <panel_attributes>lt=[^]-(</panel_attributes>
    <additional_attributes>10.0;10.0;10.0;30.0;40.0;30.0</additional_attributes>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>750</x>
      <y>630</y>
      <w>40</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>type=decision</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>980</x>
      <y>760</y>
      <w>480</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;460.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>590</x>
      <y>880</y>
      <w>870</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;850.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLState</id>
    <coordinates>
      <x>930</x>
      <y>310</y>
      <w>320</w>
      <h>170</h>
    </coordinates>
    <panel_attributes>*producer_post_and_wait*
--
entry /
  scout.producer.thread.post_fifo(..)
  	scout.post_fifo(Event(
	  signal=signals.consumer_test_complete), 
	  times=1,
	  period=0.5,
	  deferred=True)

  
	
valign=top
</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>780</x>
      <y>590</y>
      <w>380</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>consumer_test_complete
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>750</x>
      <y>510</y>
      <w>220</w>
      <h>40</h>
    </coordinates>
    <panel_attributes>try_to_connect_to_consumer
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>590</x>
      <y>470</y>
      <w>500</w>
      <h>90</h>
    </coordinates>
    <panel_attributes>lt=-&gt;</panel_attributes>
    <additional_attributes>10.0;70.0;480.0;70.0;480.0;10.0</additional_attributes>
  </element>
  <element>
    <id>UMLSpecialState</id>
    <coordinates>
      <x>80</x>
      <y>410</y>
      <w>20</w>
      <h>20</h>
    </coordinates>
    <panel_attributes>type=initial</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Relation</id>
    <coordinates>
      <x>80</x>
      <y>410</y>
      <w>90</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>lt=-&gt;</panel_attributes>
    <additional_attributes>10.0;10.0;70.0;10.0</additional_attributes>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>320</x>
      <y>1020</y>
      <w>480</w>
      <h>100</h>
    </coordinates>
    <panel_attributes>REFACTOR_SEARCH as e /
 if 'ip_address' in e.payload and scout.name is e.payload['ip_address']:
   for item in ['routing_key', 'exchange_name']:
     if item in payload:
       setattr(scout, item, payload['item'])
     
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>990</x>
      <y>740</y>
      <w>540</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>AMQP_CONSUMER_CHECK(ip_address, TRUE, routing_key, exchange_name)
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
  <element>
    <id>Text</id>
    <coordinates>
      <x>600</x>
      <y>860</y>
      <w>540</w>
      <h>30</h>
    </coordinates>
    <panel_attributes>AMQP_CONSUMER_CHECK(ip_address, FALSE, routing_key, exchange_name)
style=wordwrap</panel_attributes>
    <additional_attributes/>
  </element>
</diagram>
